# comply with DESY inhouse installation target
# compatibality with older Makefiles
ifdef OUTPUT_TYPE
	PROJECT_TYPE=$(OUTPUT_TYPE)
endif
ifdef DESTDIR
	INSTALL_DIR=$(DESTDIR)
else
# extended with standard path for shared/static libs
ifeq ($(PROJECT_TYPE),DEVICE)
	INSTALL_DIR=$(TANGO_HOME)/bin/server
endif
ifeq ($(PROJECT_TYPE),STATIC_LIB)
ifdef CPP_SERVERS
	INSTALL_DIR=$(CPP_SERVERS)/$(_libdir)
else
	INSTALL_DIR=$(TANGO_HOME)/$(_libdir)
endif
endif
ifeq ($(PROJECT_TYPE),SHARED_LIB)
	INSTALL_DIR=$(TANGO_HOME)/$(_libdir)
endif
endif


#------------------------------------------------------------------------------
#--  rule: ./*.cpp 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: %.cpp $(SVC_INCL)
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
	
#------------------------------------------------------------------------------
#--  rule: ./*.cpp 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.so.o: %.cpp $(SVC_INCL)
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
		
#------------------------------------------------------------------------------
#--  rule: ./*.cpp 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.a.o: %.cpp $(SVC_INCL)
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
	
#------------------------------------------------------------------------------
#--  rule: $(CPPDIRUSER)/*.cpp 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: $(CPPDIRUSER)/%.cpp $(SVC_INCL)
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
	
#------------------------------------------------------------------------------
#--  rule: ./*.cxx 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: %.cxx
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
	
#------------------------------------------------------------------------------ 
#--  rule: $(CPPDIRUSER)/*.cxx 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: $(CPPDIRUSER)/%.cxx
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@

#------------------------------------------------------------------------------
#--  rule: ./*.cc 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: %.cc
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
	
#------------------------------------------------------------------------------ 
#--  rule: $(CPPDIRUSER)/*.cc 
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: $(CPPDIRUSER)/%.cxx
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@
		
#------------------------------------------------------------------------------
#--  rule: ./*.c
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: %.c $(SVC_INCL)
	@echo "Compiling $< ..."
	$(CC) $(CFLAGS) -c $< -o $@
	
#------------------------------------------------------------------------------ 
#--  rule: $(CPPDIRUSER)/*.c
#------------------------------------------------------------------------------
$(OBJ_DIR)/%.o: $(CPPDIRUSER)/%.c
	@echo "Compiling $< ..."
	$(CXX) $(CXXFLAGS) -c $< -o $@



#------------------------------------------------------------------------------
#-- all:
#------------------------------------------------------------------------------
all: $(SPECIFIC_ALL_TARGET) $(PROJECT_NAME)

#------------------------------------------------------------------------------
#-- $(PROJECT_NAME) for DEVICE:
#------------------------------------------------------------------------------
ifeq ($(PROJECT_TYPE),DEVICE)
$(PROJECT_NAME): diretories $(SVC_OBJS)
		#@echo "Linking TANGO device server $(OUTPUT_DIR)/$(PROJECT_NAME) ..."
		$(CXX) $(SVC_OBJS) $(LDFLAGS) -o $(OUTPUT_DIR)/$(PROJECT_NAME)
		$(POST_PROCESSING)
endif

#------------------------------------------------------------------------------
#-- $(PROJECT_NAME) for SIMPLE_EXE:
#------------------------------------------------------------------------------
ifeq ($(PROJECT_TYPE),SIMPLE_EXE)
$(PROJECT_NAME): diretories $(SVC_OBJS)
		@echo "Linking executable $(OUTPUT_DIR)/$(PROJECT_NAME) ..."
		$(CXX) $(SVC_OBJS) $(LDFLAGS) -o $(OUTPUT_DIR)/$(PROJECT_NAME)
		$(POST_PROCESSING)
endif

#------------------------------------------------------------------------------
#-- $(PROJECT_NAME) for STATIC_LIB:
#------------------------------------------------------------------------------
# Makefile from elderly pogo version did not have
# LIB_OBJS, so we have to use SVC_OBJS (which is not clean,
# since the lib will comtain main.o/ClassFactory.o
ifeq ($(PROJECT_TYPE),STATIC_LIB)
$(PROJECT_NAME):    diretories	$(SVC_OBJS)
		@echo "Creating static library "$(OUTPUT_DIR)/lib$(PROJECT_NAME).a
ifdef EXTERNAL_LIBS
		mkdir -p $(OBJ_DIR)/external_libs
		cd $(OBJ_DIR)/external_libs && \
		for EXTERNAL_LIB in $(EXTERNAL_LIBS); do ar x $$EXTERNAL_LIB; done && \
		cd -
ifdef LIB_OBJS
		ar rcs $(OUTPUT_DIR)/lib$(PROJECT_NAME).a $(LIB_OBJS) $(OBJ_DIR)/external_libs/*.o
else
		ar rcs $(OUTPUT_DIR)/lib$(PROJECT_NAME).a $(SVC_OBJS) $(OBJ_DIR)/external_libs/*.o
endif
		rm -f $(OBJ_DIR)/external_libs/*
else
ifdef LIB_OBJS
		ar rcs $(OUTPUT_DIR)/lib$(PROJECT_NAME).a $(LIB_OBJS)
else
		ar rcs $(OUTPUT_DIR)/lib$(PROJECT_NAME).a $(SVC_OBJS)
endif
endif
endif

#------------------------------------------------------------------------------
#-- $(PROJECT_NAME) for SHARED_LIB:
#------------------------------------------------------------------------------
ifeq ($(PROJECT_TYPE),SHARED_LIB)
$(PROJECT_NAME):    diretories	$(SVC_OBJS)
		@echo "Linking shared library "$(OUTPUT_DIR)/lib$(PROJECT_NAME).so
		$(CXX) $(LIB_OBJS) $(LDFLAGS) -o $(OUTPUT_DIR)/lib$(PROJECT_NAME).so
		@echo "Link successfull"
endif

#------------------------------------------------------------------------------
#-- diretories:
#------------------------------------------------------------------------------
diretories:
	@echo "Creating directories "$(OUTPUT_DIR)
	@mkdir -p $(OUTPUT_DIR)
	@for FILE in $(SVC_OBJS); do mkdir -p `dirname $$FILE`; done

#------------------------------------------------------------------------------
#-- clean:
#------------------------------------------------------------------------------
clean: $(SPECIFIC_CLEAN_TARGET)
	@echo "Cleaning "$(PROJECT_NAME)
ifdef OBJ_DIR
ifneq ($(OBJ_DIR),/tmp)
	rm -rf $(OBJ_DIR)
endif
endif
ifeq ($(PROJECT_TYPE),SIMPLE_EXE)
	rm -f $(OUTPUT_DIR)/$(PROJECT_NAME)
endif
ifeq ($(PROJECT_TYPE),DEVICE)
	rm -f $(OUTPUT_DIR)/$(PROJECT_NAME) $(OUTPUT_DIR)/core
endif
ifeq ($(PROJECT_TYPE),STATIC_LIB)
	rm -f $(OUTPUT_DIR)/lib$(PROJECT_NAME).a
endif
ifeq ($(PROJECT_TYPE),SHARED_LIB)
	rm -f $(OUTPUT_DIR)/lib$(PROJECT_NAME).so
endif
  
#------------------------------------------------------------------------------
#-- install:
# extended for static and shared libs, HB
# call all before installing so we can do all in one go
#------------------------------------------------------------------------------

install: all
ifeq ($(PROJECT_TYPE),DEVICE)
	@echo "Installing $(OUTPUT_DIR)/$(PROJECT_NAME)  to  $(INSTALL_DIR)"
	cp $(OUTPUT_DIR)/$(PROJECT_NAME) $(INSTALL_DIR)
	ls -l $(INSTALL_DIR)/$(PROJECT_NAME)
endif
ifeq ($(PROJECT_TYPE),STATIC_LIB)
	@echo "Installing $(OUTPUT_DIR)/lib$(PROJECT_NAME).a  to  $(INSTALL_DIR)"
	cp $(OUTPUT_DIR)/lib$(PROJECT_NAME).a $(INSTALL_DIR)
endif
ifeq ($(PROJECT_TYPE),SHARED_LIB)
	@echo "Installing $(OUTPUT_DIR)/lib$(PROJECT_NAME).so  to  $(INSTALL_DIR)"
	cp $(OUTPUT_DIR)/lib$(PROJECT_NAME).so $(INSTALL_DIR)
endif



#------------------------------------------------------
#	Tag the CVS/SVN module corresponding to this class
#------------------------------------------------------
# standard DESY tag, check for correct version numbering
tag:
ifeq ( $(shell ls -d ../tags/$(RELEASE)  2>/dev/null), ../tags/$(RELEASE))
	@echo $(RELEASE) exists, specify new version numbers
else
	svn copy ../trunk ../tags/$(RELEASE)
	svn commit ../tags/$(RELEASE) \
	-m "Tagging the $(RELEASE) of the $(CLASS) project."
endif
svn_tag:
	svn copy ../trunk ../tags/$(RELEASE)       
	svn commit ../tags/$(RELEASE) \
	-m "Tagging the $(RELEASE) of the $(PACKAGE_NAME) project."

cvs_tag:
	@cvstag "$(PACKAGE_NAME)-$(RELEASE)"
	@make   $(PACKAGE_NAME)
	@make show_cvs_tag

show_cvs_tag:
	@cvstag -d

version:
	@echo $(MAJOR_VERS).$(MINOR_VERS)
